import React from "react";
import CodeBlock from "../../components/CodeBlock";
import Explain from "../../components/Explain";
import "../../learn.css"; // —ç—Å–≤—ç–ª MainApp.css –¥–æ—Ç–æ—Ä @import —Ö–∏–π—Å—ç–Ω –±–æ–ª —Ö—ç—Ä—ç–≥–≥“Ø–π

// Chapter3.js
function Greeting({ name }) {
  return <p className="text-green-600">–°–∞–π–Ω —É—É, {name}! üëã</p>;
}

 function Chapter3() {
  return (
    <div>
    <div className="p-4 border rounded-xl shadow-md w-64 bg-white">
      <h2 className="text-lg font-bold">Chapter 3: Props</h2>
      <Greeting name="–ë–∏–ª–≥“Ø“Ø–Ω" />
      <Greeting name="React —Å—É—Ä–∞–ª—Ü–∞–≥—á" />
    </div>
          <h2>Functional Programming with JavaScript</h2>

      <div className="lr-section">
  <CodeBlock label="Imperative vs Declarative">
{`// Imperative
let url = "";
for (let char of str) {
  url += char === " " ? "-" : char;
}

// Declarative
const urlFriendly = str.replace(/ /g, "-")`}
<Explain variant="info">
  <b>Imperative</b> –∫–æ–¥ –Ω—å —Ö—ç—Ä—Ö—ç–Ω —Ö–∏–π—Ö–∏–π–≥ (how) –∑–∞–∞–¥–∞–≥‚Äî—à—É–¥ –¥–∞–≤—Ç–∞–ª—Ç, –Ω”©—Ö—Ü”©–ª –∑—ç—Ä—ç–≥—Ç—ç–π. –•–∞—Ä–∏–Ω <b>Declarative</b> –∫–æ–¥ –Ω—å —é—É —Ö–∏–π—Ö–∏–π–≥ (what) –∏–ª—ç—Ä—Ö–∏–π–ª–∂, –æ–π–ª–≥–æ—Ö–æ–¥ –∞–º–∞—Ä, —Ü—ç–≤—ç—Ä.
</Explain>
  </CodeBlock>
</div>

<div className="lr-section">
  <CodeBlock label="Immutability & Pure Function">
{`const selfEducate = person => ({
  ...person,
  canRead: true,
  canWrite: true
});`}
<Explain variant="info">
  –≠–Ω—ç —Ñ—É–Ω–∫—Ü –Ω—å —ç—Ö –æ–±—ä–µ–∫—Ç—ã–≥ ”©”©—Ä—á–ª”©–ª–≥“Ø–π–≥—ç—ç—Ä (uneffected), —à–∏–Ω—ç –æ–±—ä–µ–∫—Ç “Ø“Ø—Å–≥—ç–Ω—ç. –≠–Ω—ç –Ω—å <b>pure function</b> –±”©–≥”©”©–¥ ”©–≥”©–≥–¥–ª–∏–π–≥ –∑–∞–¥–∞–ª–∂, “Ø—Ä –¥“Ø–Ω–¥ –Ω—å —à–∏–Ω—ç—ç—Ä –æ–±—ä–µ–∫—Ç “Ø“Ø—Å–≥—ç–∂ ”©–≥–Ω”©.
</Explain>
  </CodeBlock>
</div>

<div className="lr-section">
  <CodeBlock label="Map / Filter / Reduce">
{`const names = users.map(u => u.name);
const active = items.filter(i => i.active);
const sum = numbers.reduce((total, n) => total + n, 0);`}
<Explain variant="info">
  –≠–¥–≥—ç—ç—Ä –Ω—å functional —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—É—É–¥ –±”©–≥”©”©–¥ –º–∞—Å—Å–∏–≤–∏–π–≥ —à–∏–Ω—ç –º–∞—Å—Å–∏–≤ –±–æ–ª–≥–æ–Ω –±–æ–ª–æ–≤—Å—Ä—É—É–ª–Ω–∞. –ö–æ–¥ –Ω—å –∏–ª“Ø“Ø –æ–π–ª–≥–æ–º–∂—Ç–æ–π, —É–Ω—à–∏—Ö–∞–¥ —ç–Ω–≥–∏–π–Ω.
</Explain>
  </CodeBlock>
</div>

<div className="lr-section">
  <CodeBlock label="Higher-order Function">
{`const withLogging = fn => (...args) => {
  console.log("Called with", args);
  return fn(...args);
};`}
<Explain variant="info">
  –≠–Ω—ç –Ω—å <b>higher-order function</b> –±—É—é—É —Ñ—É–Ω–∫—Ü—ã–≥ –∞—Ä–≥—É–º–µ–Ω—Ç –±–æ–ª–æ–Ω “Ø—Ä –¥“Ø–Ω –±–æ–ª–≥–æ–Ω–æ. –ò–Ω–≥—ç—Å–Ω—ç—ç—Ä –ª–æ–≥–∏–∫ —Å–∞–π–∂—Ä–∞—Ö, –∫–æ–¥ –¥–∞—Ö–∏–Ω –∞—à–∏–≥–ª–∞—Ö –±–æ–ª–æ–º–∂ –Ω—ç–º—ç–≥–¥—ç–Ω—ç.
</Explain>
  </CodeBlock>
</div>
    </div>
  );
}

export default Chapter3